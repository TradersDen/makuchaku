//@version=5
//This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
indicator('Super OrderBlock / FVG / BoS and ABC with Alert','Super OrderBlock 1.1', overlay=true, max_boxes_count=500, max_lines_count=500)

plotOB = input.bool(defval=true, title='Plot OB', group='Order Blocks')
obBullColor = input.color(defval=color.new(color.green, 90), title='Bullish OB Color', inline='Set Custom Color', group='Order Blocks')
obBearColor = input.color(defval=color.new(color.red, 90), title='Bearish OB Color', inline='Set Custom Color', group='Order Blocks')
obBoxBorder = input.string(defval=line.style_solid, title='OB Box Border Style', options=[line.style_dashed, line.style_dotted, line.style_solid], group='Order Blocks', tooltip='To disable border, set Border Width below to 0')
obBorderTransparency = input.int(defval=80, title='OB Border Box Transparency', minval=0, maxval=100, group='Order Blocks')
obMaxBoxSet = input.int(defval=10, title='Maximum OB Box Displayed', minval=1, maxval=100, group='Order Blocks', tooltip='Minimum = 1, Maximum = 100')
filterMitOB = input.bool(defval=false, title='Custom Color Mitigated OB', group='Order Blocks')
mitOBColor = input.color(defval=color.new(color.gray, 90), title='Mitigated OB Color', group='Order Blocks', inline='Set Custom Color Mit OB', tooltip='Set Transparency to 0 to make mitigated OB disappear')

plotFVG = input.bool(defval=true, title='Plot FVG', group='Fair Value Gaps', inline='FVG sets')
plotStructureBreakingFVG = input.bool(defval=true, title='Plot Structure Breaking FVG', group='Fair Value Gaps', inline='FVG sets')
fvgBullColor = input.color(defval=color.new(color.aqua, 90), title='Bullish FVG Color', inline='Set Custom Color', group='Fair Value Gaps')
fvgBearColor = input.color(defval=color.new(color.orange, 90), title='Bearish FVG Color', inline='Set Custom Color', group='Fair Value Gaps')
fvgStructBreakingColor = input.color(defval=color.new(color.blue, 90), title='Structure Breaking FVG Color', inline='Set Custom Color', group='Fair Value Gaps')
fvgBoxBorder = input.string(defval=line.style_solid, title='FVG Box Border Style', options=[line.style_dashed, line.style_dotted, line.style_solid], group='Fair Value Gaps', tooltip='To disable border, set Border Width below to 0')
fvgBorderTransparency = input.int(defval=80, title='FVG Border Box Transparency', minval=0, maxval=100, group='Fair Value Gaps')
fvgMaxBoxSet = input.int(defval=10, title='Maximum FVG Box Displayed', minval=1, maxval=100, group='Fair Value Gaps', tooltip='Minimum = 1, Maximum = 100')
filterMitFVG = input.bool(defval=false, title='Custom Color Mitigated FVG', group='Fair Value Gaps')
mitFVGColor = input.color(defval=color.new(color.gray, 90), title='Mitigated FVG Color', group='Fair Value Gaps', inline='Set Custom Color Mit FVG', tooltip='Set Transparency to 0 to make mitigated FVG disappear')

plotRJB = input.bool(defval=false, title='Plot RJB', group='Rejection Blocks', inline='RJB sets')
rjbBullColor = input.color(defval=color.new(#a6ff00, 90), title='Bullish RJB Color', inline='Set Custom Color', group='Rejection Blocks')
rjbBearColor = input.color(defval=color.new(#ff00ce, 90), title='Bearish RJB Color', inline='Set Custom Color', group='Rejection Blocks')
rjbBoxBorder = input.string(defval=line.style_solid, title='RJB Box Border Style', options=[line.style_dashed, line.style_dotted, line.style_solid], group='Rejection Blocks', tooltip='To disable border, set Border Width below to 0')
rjbBorderTransparency = input.int(defval=80, title='RJB Border Box Transparency', minval=0, maxval=100, group='Rejection Blocks')
rjbMaxBoxSet = input.int(defval=10, title='Maximum RJB Box Displayed', minval=1, maxval=100, group='Rejection Blocks', tooltip='Minimum = 1, Maximum = 100')
filterMitRJB = input.bool(defval=false, title='Custom Color Mitigated RJB', group='Rejection Blocks')
mitRJBColor = input.color(defval=color.new(color.gray, 90), title='Mitigated RJB Color', group='Rejection Blocks', inline='Set Custom Color Mit RJB', tooltip='Set to 100 to make mitigated RJB disappear')

plotPVT = input.bool(defval=true, title='Plot Pivots', group='Pivots')
pivotLookup  = input.int(defval=1, minval=1, maxval=5,title='Pivot Lookup', group='Pivots', tooltip='Minimum = 1, Maximum = 5')
pvtTopColor = input.color(defval=color.new(color.red, 0), title='Pivot Top Color', group='Pivots', inline='PVT Color')
pvtBottomColor = input.color(defval=color.new(color.green, 0), title='Pivot Bottom Color', group='Pivots', inline='PVT Color')

plotLiq = input.bool(defval=true, title='Plot Liquidity', group='Liquidity')
pvtStyle = input.string(defval=line.style_dashed, title='Liquidity Line Style', options=[line.style_solid, line.style_dotted, line.style_dashed, line.style_arrow_left, line.style_arrow_right, line.style_arrow_both], group='Liquidity')
pvtMax = input.int(defval=10, title='Maximum Liquidity Displayed', minval=1, maxval=500, group='Liquidity', tooltip='Minimum = 1, Maximum = 500')


plotBOS = input.bool(defval=false, title='Plot BoS', group='Crossovers', inline='BOS sets')
useHighLowForBullishBoS = input.bool(defval=false, title='Use High/Low for Bullish BoS (for Bearish setup)', group='Crossovers')
useHighLowForBearishBoS = input.bool(defval=false, title='Use High/Low for Bearish BoS (for Bullish setup)', group='Crossovers')
bosBoxFlag  = input.bool(title='BoS Box Length Manually', defval=false, group='Crossovers', tooltip='If activated the BoS Boxes will not extend unitl crossed by price. Instead will extend by the amount of bars choosen in the "Set BoS Box Length Manually" option')
bosBoxLength  = input.int(title='BoS Box Length Manually', defval=3, minval=1, maxval=5, group='Crossovers', inline='BoS Boxes', tooltip='If "Set BoS Box Length Manually" is marked, choose by how many bars. Minimum = 1, Maximum = 5')
bosBullColor = input.color(defval=color.new(#00FFAB, 90), title='Bullish BoS Color', inline='Set Custom Color', group='Crossovers')
bosBearColor = input.color(defval=color.new(#BD4291, 90), title='Bearish BoS Color', inline='Set Custom Color', group='Crossovers')
bosBoxBorder = input.string(defval=line.style_dotted, title='BoS Box Border Style', options=[line.style_dashed, line.style_dotted, line.style_solid], group='Crossovers', tooltip='To disable border, set Border Width below to 0')
bosBorderTransparency = input.int(defval=80, title='BoS Border Box Transparency', minval=0, maxval=100, group='Crossovers')
bosMaxBoxSet = input.int(defval=10, title='Maximum BoS Box Displayed', minval=1, maxval=100, group='Crossovers', tooltip='Minimum = 1, Maximum = 100')

plotHVB = input.bool(defval=true, title='Plot HVB', group='High Volume Bar', tooltip='A candle where the average volume is higher than last few bars.')
hvbBullColor = input.color(defval=color.green, title='Bullish HVB Color', inline='Set Custom Color', group='High Volume Bar')
hvbBearColor = input.color(defval=color.red, title='Bearish HVB Color', inline='Set Custom Color', group='High Volume Bar')
hvbEMAPeriod = input.int(defval=12, minval=1, title='Volume EMA Period', group='High Volume Bar')
hvbMultiplier = input.float(defval=1.5, title='Volume Multiplier', minval=1, maxval=100, group='High Volume Bar')

plotPPDD = input.bool(defval=true, title="Plot PPDD OB's", group='Qualitative indicators', tooltip='Premium Premium Discount Discount (PPDD) is an OB formed after liquidity sweep. It will show up by default as a triangle (Bull ▲ / Bear ▼). Also PPDD1 (by deafult maked with a x-cross ⨯) which is a weak OB formed after liquidity sweep, that fails to completely engulf the high/low, but closes beyond the trapped candles open price.')
ppddBullColor = input.color(defval=color.new(color.green, 0), title="Bullish PPDD OB's Color", group='Qualitative indicators', inline='PPDD Color')
ppddBearColor = input.color(defval=color.new(color.red, 0), title="Bearish PPDD OB's Color", group='Qualitative indicators', inline='PPDD Color')

plotOBFVG = input.bool(defval=true, title='Plot Stacked OB+FVG', group='Qualitative indicators', tooltip='Marks the candle (default with a diamond ◆) when an OB & FVG are stacked, showing momentum')
obfvgBullColor = input.color(defval=color.new(color.green, 0), title='Bullish Stacked OB+FVG Color', group='Qualitative indicators', inline='OBFVG Color')
obfvgBearColor = input.color(defval=color.new(color.red, 0), title='Bearish Stacked OB+FVG Color', group='Qualitative indicators', inline='OBFVG Color')

plotLabelOB = input.bool(defval=true, title='Plot OB Label', inline='OB label', group='Label Options')
obLabelColor = input.color(defval=color.gray, title='Color', inline='OB label', group='Label Options')
obLabelSize = input.string(defval=size.tiny, title="Size", options=[size.huge, size.large, size.small, size.tiny, size.auto, size.normal], inline='OB label', group='Label Options')
plotLabelFVG = input.bool(defval=true, title='Plot FVG Label', inline='FVG label', group='Label Options')
fvgLabelColor = input.color(defval=color.gray, title='Color', inline='FVG label', group='Label Options')
fvgLabelSize = input.string(defval=size.tiny, title="Size", options=[size.huge, size.large, size.small, size.tiny, size.auto, size.normal], inline='FVG label', group='Label Options')
plotLabelRJB = input.bool(defval=true, title='Plot RJB Label', inline='RJB label', group='Label Options')
rjbLabelColor = input.color(defval=color.gray, title='Color', inline='RJB label', group='Label Options')
rjbLabelSize = input.string(defval=size.tiny, title="Size", options=[size.huge, size.large, size.small, size.tiny, size.auto, size.normal], inline='RJB label', group='Label Options')
plotLabelBOS = input.bool(defval=true, title='Plot BoS Label', inline='BOS label', group='Label Options')
bosLabelColor = input.color(defval=color.gray, title='Color', inline='BOS label', group='Label Options')
bosLabelSize = input.string(defval=size.tiny, title="Size", options=[size.huge, size.large, size.small, size.tiny, size.auto, size.normal], inline='BOS label', group='Label Options')

//Box Types
var int _ob  = 1
var int _fvg = 2
var int _rjb = 3
var int _bos = 4

//Box Labels
var string _obLabel  = "OB"
var string _fvgLabel = "FVG"
var string _rjbLabel = "RJB"
var string _bosLabel = "BoS"
var string _plus     = "+"
var string _minus    = "-"
var string _empty    = ""

//Box Arrays
var box[] _bearBoxesOB  = array.new_box()
var box[] _bullBoxesOB  = array.new_box()
var box[] _bearBoxesFVG = array.new_box()
var box[] _bullBoxesFVG = array.new_box()
var box[] _bearBoxesRJB = array.new_box()
var box[] _bullBoxesRJB = array.new_box()
var box[] _bearBoxesBOS = array.new_box()
var box[] _bullBoxesBOS = array.new_box()

//Functions
isUp(index) =>
    close[index] > open[index]

isDown(index) =>
    close[index] < open[index]

isObUp(index) =>
    isDown(index + 1) and isUp(index) and close[index] > high[index + 1]

isObDown(index) =>
    isUp(index + 1) and isDown(index) and close[index] < low[index + 1]

isFvgUp(index) =>
    (low[index] > high[index + 2])

isFvgDown(index) =>
    (high[index] < low[index + 2])

//Function to Calculte Box Length
_controlBox(_boxes, _high, _low, _type) =>
    if array.size(_boxes) > 0
        for i = array.size(_boxes) - 1 to 0 by 1
            _box = array.get(_boxes, i)
            _boxLow = box.get_bottom(_box)
            _boxHigh = box.get_top(_box)
            _boxRight = box.get_right(_box)
            if bosBoxFlag and _type == _bos
                if na or (bar_index + bosBoxLength - 1 == _boxRight and not((_high > _boxLow and _low < _boxLow) or (_high > _boxHigh and _low < _boxHigh)))
                    box.set_right(_box, bar_index + bosBoxLength - 1)
            else if (filterMitOB and _type == _ob) or (filterMitFVG and _type == _fvg) or (filterMitRJB and _type == _rjb)
                if na or (bar_index == _boxRight and not((_high > _boxLow and _low < _boxLow) or (_high > _boxHigh and _low < _boxHigh)))
                    box.set_right(_box, bar_index + 1)
                else
                    if _type == _ob
                        box.set_bgcolor(_box, mitOBColor)
                        box.set_border_color(_box, mitOBColor)
                    else if _type == _fvg
                        box.set_bgcolor(_box, mitFVGColor)
                        box.set_border_color(_box, mitFVGColor)
                    else if _type == _rjb
                        box.set_bgcolor(_box, mitRJBColor)
                        box.set_border_color(_box, mitRJBColor)
            else
                if na or (bar_index == _boxRight and not((_high > _boxLow and _low < _boxLow) or (_high > _boxHigh and _low < _boxHigh)))
                    box.set_right(_box, bar_index + 1)

//////////////////// Pivots //////////////////// 
hih = ta.pivothigh(high, pivotLookup, pivotLookup)
lol = ta.pivotlow(low , pivotLookup, pivotLookup)
top = ta.valuewhen(hih, high[pivotLookup], 0)
bottom = ta.valuewhen(lol, low [pivotLookup], 0)
plot(top, offset=-pivotLookup, linewidth=1, color=(top != top[1] ? na : (plotPVT ? pvtTopColor : na)), title="Pivot Top")
plot(bottom, offset=-pivotLookup, linewidth=1, color=(bottom != bottom[1] ? na : (plotPVT ? pvtBottomColor : na)), title="Pivot Bottom")

//////////////////// Order Block //////////////////
//Bullish OB Box Plotting
if isObUp(1) and plotOB
    _bullboxOB = box.new(left=bar_index - 2, top=high[2], right=bar_index, bottom=math.min(low[2], low[1]), border_color=color.new(obBullColor, obBorderTransparency), border_style=obBoxBorder, border_width=1, bgcolor=obBullColor, 
     text=plotLabelOB ? _obLabel  + _plus : _empty, text_halign=text.align_right, text_valign=text.align_bottom, text_size=obLabelSize, text_color=obLabelColor)
    if array.size(_bullBoxesOB) > obMaxBoxSet
        box.delete(array.shift(_bullBoxesOB))
    array.push(_bullBoxesOB, _bullboxOB)

//Bearish OB Box Plotting
if isObDown(1) and plotOB
    _bearboxOB = box.new(left=bar_index - 2, top=math.max(high[2], high[1]), right=bar_index, bottom=low[2], border_color=color.new(obBearColor, obBorderTransparency), border_style=obBoxBorder, border_width=1, bgcolor=obBearColor, 
     text=plotLabelOB ? _obLabel  + _minus : _empty, text_halign=text.align_right, text_valign=text.align_bottom, text_size=obLabelSize, text_color=obLabelColor)
    if array.size(_bearBoxesOB) > obMaxBoxSet
        box.delete(array.shift(_bearBoxesOB))
    array.push(_bearBoxesOB, _bearboxOB)
    
if plotOB
    _controlBox(_bearBoxesOB, high, low, _ob)
    _controlBox(_bullBoxesOB, high, low, _ob)

//////////////////// Fair Value Gap //////////////////
bullStructureBreakingFVG = false 
bearStructureBreakingFVG = false 

//Bullish FVG Box Plotting
if isFvgUp(0)
    box _bullboxFVG = na
    bullStructureBreakingFVG := bullStructureBreakingFVG
    if plotStructureBreakingFVG and (close[1] > top) and (low[1] < top) and (high[2] < top) and (low > top)
        _bullboxFVG := box.new(left=bar_index-2, top=low[0], right=bar_index, bottom=high[2], bgcolor=fvgStructBreakingColor, border_color=color.new(fvgStructBreakingColor, fvgBorderTransparency), border_style=fvgBoxBorder, border_width=1,
         text=plotLabelFVG ? _fvgLabel  + _plus : _empty, text_halign=text.align_right, text_valign=text.align_bottom, text_size=fvgLabelSize, text_color=fvgLabelColor)        
    else if plotFVG   
        _bullboxFVG := box.new(left=bar_index-2, top=low[0], right=bar_index, bottom=high[2], bgcolor=fvgBullColor, border_color=color.new(fvgBullColor, fvgBorderTransparency), border_style=fvgBoxBorder, border_width=1,
         text=plotLabelFVG ? _fvgLabel  + _plus : _empty, text_halign=text.align_right, text_valign=text.align_bottom, text_size=fvgLabelSize, text_color=fvgLabelColor)    
    if array.size(_bullBoxesFVG) > fvgMaxBoxSet
        box.delete(array.shift(_bullBoxesFVG))
    array.push(_bullBoxesFVG, _bullboxFVG)

//Bearish FVG Box Plotting    
if isFvgDown(0)
    box _bearboxFVG = na
    bearStructureBreakingFVG := (high[1] > bottom) and (low[2] > bottom) and (high < bottom)
    if plotStructureBreakingFVG and (close[1] < bottom) and (high[1] > bottom) and (low[2] > bottom) and (high < bottom)
        _bearboxFVG := box.new(left=bar_index-2, top=low[2], right=bar_index, bottom=high[0], bgcolor=fvgStructBreakingColor, border_color=color.new(fvgStructBreakingColor, fvgBorderTransparency), border_style=fvgBoxBorder, border_width=1,
         text=plotLabelFVG ? _fvgLabel  + _minus : _empty, text_halign=text.align_right, text_valign=text.align_bottom, text_size=fvgLabelSize, text_color=fvgLabelColor)    
    else if plotFVG
        _bearboxFVG := box.new(left=bar_index-2, top=low[2], right=bar_index, bottom=high[0], bgcolor=fvgBearColor, border_color=color.new(fvgBearColor, fvgBorderTransparency), border_style=fvgBoxBorder, border_width=1,
         text=plotLabelFVG ? _fvgLabel  + _minus : _empty, text_halign=text.align_right, text_valign=text.align_bottom, text_size=fvgLabelSize, text_color=fvgLabelColor)    
    if array.size(_bearBoxesFVG) > fvgMaxBoxSet
        box.delete(array.shift(_bearBoxesFVG))
    array.push(_bearBoxesFVG, _bearboxFVG)
    
if plotFVG or plotStructureBreakingFVG
    _controlBox(_bearBoxesFVG, high, low, _fvg)
    _controlBox(_bullBoxesFVG, high, low, _fvg)

//////////////////// Rejection Block //////////////////
bullRJB = false 
bearRJB = false 

if plotRJB
    isDownRjbObCondition = isObDown(1)
    isDownRjb1 = isDownRjbObCondition and  (high[1] < (close[2] + 0.2*(high[2]-close[2]))) // RJB is on trapped's wick and <50% of the wick was covered by signal
    isDownRjb2 = isDownRjbObCondition and (high[1] > high[2]) // RJB is on signal's wick
    bearRJB := isDownRjb1 or isDownRjb2
    if isDownRjb1 and plotRJB
        _bearboxRJB = box.new(left=bar_index-2, top=high[2], right=bar_index, bottom=close[2], bgcolor=rjbBearColor, border_color=color.new(rjbBearColor, rjbBorderTransparency), border_style=rjbBoxBorder, border_width=1,
         text=plotLabelRJB ? _rjbLabel  + _minus : _empty, text_halign=text.align_right, text_valign=text.align_bottom, text_size=rjbLabelSize, text_color=rjbLabelColor)
        if array.size(_bearBoxesRJB) > rjbMaxBoxSet
            box.delete(array.shift(_bearBoxesRJB))
        array.push(_bearBoxesRJB, _bearboxRJB)
        
    if isDownRjb2 and plotRJB
        _bearboxRJB = box.new(left=bar_index-1, top=high[1], right=bar_index, bottom=open[1], bgcolor=rjbBearColor, border_color=color.new(rjbBearColor, rjbBorderTransparency), border_style=rjbBoxBorder, border_width=1,
         text=plotLabelRJB ? _rjbLabel  + _minus : _empty, text_halign=text.align_right, text_valign=text.align_bottom, text_size=rjbLabelSize, text_color=rjbLabelColor)
        if array.size(_bearBoxesRJB) > rjbMaxBoxSet
            box.delete(array.shift(_bearBoxesRJB))
        array.push(_bearBoxesRJB, _bearboxRJB)

//Bullish RJB Box Plotting
if plotRJB
    isUpRjbObCondition = isObUp(1)
    isUpRjb1 = isUpRjbObCondition and (low[1] > (close[2] - 0.2*(close[2]-low[2]))) // RJB is on trapped's wick and <50% of the wick was covered by signal
    isUpRjb2 = isUpRjbObCondition and (low[1] < low[2]) // RJB is on signal's wick
    bullRJB := isUpRjb1 or isUpRjb2

    if isUpRjb1 and plotRJB
        _bullboxRJB = box.new(left=bar_index-2, top=close[2], right=bar_index, bottom=low[2], bgcolor=rjbBullColor, border_color=color.new(rjbBullColor, rjbBorderTransparency), border_style=rjbBoxBorder, border_width=1,
         text=plotLabelRJB ? _rjbLabel  + _plus : _empty, text_halign=text.align_right, text_valign=text.align_bottom, text_size=rjbLabelSize, text_color=rjbLabelColor)
        if array.size(_bullBoxesRJB) > rjbMaxBoxSet
            box.delete(array.shift(_bullBoxesRJB))
        array.push(_bullBoxesRJB, _bullboxRJB)
    
    if isUpRjb2 and plotRJB
        _bullboxRJB = box.new(left=bar_index-1, top=open[1], right=bar_index, bottom=low[1], bgcolor=rjbBullColor, border_color=color.new(rjbBullColor, rjbBorderTransparency), border_style=rjbBoxBorder, border_width=1, 
         text=plotLabelRJB ? _rjbLabel  + _plus : _empty, text_halign=text.align_right, text_valign=text.align_bottom, text_size=rjbLabelSize, text_color=rjbLabelColor)
        if array.size(_bullBoxesRJB) > rjbMaxBoxSet
            box.delete(array.shift(_bullBoxesRJB))
        array.push(_bullBoxesRJB, _bullboxRJB)

if plotRJB
    _controlBox(_bearBoxesRJB, high, low, _rjb)
    _controlBox(_bullBoxesRJB, high, low, _rjb)

//////////////////// Crossovers a.k.a. Break of Structure ////////////////////
//Bullish BOS Box Plotting
bullBOS = false 
bearBOS = false 

if plotBOS
    if ta.crossover(useHighLowForBullishBoS ? high : close, top)
        _bullboxBOS = box.new(left=bar_index, top=top, right=bosBoxFlag ? bar_index+bosBoxLength : bar_index+1, bottom=bottom, bgcolor=bosBullColor, border_color=color.new(bosBullColor, bosBorderTransparency), border_style=bosBoxBorder, border_width=1, 
         text=plotLabelBOS ? _bosLabel + _plus : _empty, text_halign=text.align_right, text_valign=text.align_bottom, text_size=bosLabelSize, text_color=bosLabelColor)
        if array.size(_bullBoxesBOS) > bosMaxBoxSet
            box.delete(array.shift(_bullBoxesBOS))
        array.push(_bullBoxesBOS, _bullboxBOS)
        bullBOS := true
        
//Bearish BOS Box Plotting        
if plotBOS 
    if ta.crossunder(useHighLowForBearishBoS ? low : close, bottom)
        _bearboxBOS = box.new(left=bar_index, top=top, right=bosBoxFlag ? bar_index+bosBoxLength : bar_index+1, bottom=bottom, bgcolor=bosBearColor, border_color=color.new(bosBearColor, bosBorderTransparency), border_style=bosBoxBorder, border_width=1, 
         text=plotLabelBOS ? _bosLabel  + _minus : _empty, text_halign=text.align_right, text_valign=text.align_bottom, text_size=bosLabelSize, text_color=bosLabelColor)
        if array.size(_bearBoxesBOS) > bosMaxBoxSet
            box.delete(array.shift(_bearBoxesBOS))
        array.push(_bearBoxesBOS, _bearboxBOS)
        bearBOS := true

if plotBOS
    _controlBox(_bearBoxesBOS, high, low, _bos)
    _controlBox(_bullBoxesBOS, high, low, _bos)

//////////////////// Premium Premium & Discount Discount //////////////////
premiumPremium = plotPPDD and isObDown(0) and ((math.max(high, high[1]) > top and close < top) or (math.max(high, high[1]) > top[1] and close < top[1]))
discountDiscount = plotPPDD and isObUp(0) and ((math.min(low, low[1]) < bottom and close > bottom) or (math.min(low, low[1]) < bottom[1] and close > bottom[1]))
plotshape(premiumPremium, "Bearish PPDD OB", style=shape.triangledown , location=location.abovebar, color=ppddBearColor, size=size.tiny)
plotshape(discountDiscount, "Bullish PPDD OB", style=shape.triangleup , location=location.belowbar, color=ppddBullColor, size=size.tiny)

premiumPremium1 = plotPPDD and (isUp(1) and isDown(0) and close[0] < open[1]) and ((math.max(high, high[1]) > top and close < top) or (math.max(high, high[1]) > top[1] and close < top[1])) and not premiumPremium
discountDiscount1 = plotPPDD and (isDown(1) and isUp(0) and close[0] > open[1]) and ((math.min(low, low[1]) < bottom and close > bottom) or (math.min(low, low[1]) < bottom[1] and close > bottom[1])) and not discountDiscount
plotshape(premiumPremium1, "Bearish PPDD Weak OB", style=shape.xcross, location=location.abovebar, color=ppddBearColor, size=size.tiny)
plotshape(discountDiscount1, "Bullish PPDD Weak OB", style=shape.xcross, location=location.belowbar, color=ppddBullColor, size=size.tiny)

////////////////// High Volume Bars //////////////////
volEma = ta.ema(volume, hvbEMAPeriod)
isHighVolume = volume > (hvbMultiplier * volEma)
barcolor(plotHVB and isUp(0) and isHighVolume ? hvbBullColor : na, title="Bullish HVB")
barcolor(plotHVB and isDown(0) and isHighVolume ? hvbBearColor : na, title="Bearish HVB")

///////////////// Stacked OB + FVG //////////////////
plotshape(plotOBFVG and isFvgDown(0) and isObDown(1), "Bearish OB+FVG Stack", style=shape.diamond, location=location.abovebar, color=obfvgBearColor, size=size.tiny)
plotshape(plotOBFVG and isFvgUp(0) and isObUp(1), "Bullish OB+FVG Stack", style=shape.diamond, location=location.belowbar, color=obfvgBullColor, size=size.tiny)

//////////////////// Liquidity ////////////////////
var line[] _lowLiqLines  = array.new_line()
var line[] _highLiqLines  = array.new_line()

//Functions
isPvtHigh(_index, __high) =>
    __high[_index+2] < __high[_index+1] and __high[_index+1] > __high[_index]

    //  |   <-- pivot high
    // |||  <-- candles
    // 210  <-- candle index

isPvtLow(_index, __low) =>
    __low[_index+2] > __low[_index+1] and __low[_index+1] < __low[_index]

    // |||  <-- candles
    //  |   <-- pivot low
    // 210  <-- candle index

//Function to Calculte Line Length
_controlLine(_lines, __high, __low) =>
    if array.size(_lines) > 0
        for i = array.size(_lines) - 1 to 0 by 1
            _line = array.get(_lines, i)
            _lineLow = line.get_y1(_line)
            _lineHigh = line.get_y2(_line)
            _lineRight = line.get_x2(_line)
            if na or (bar_index == _lineRight and not((__high > _lineLow and __low < _lineLow) or (__high > _lineHigh and __low < _lineHigh)))
                line.set_x2(_line, bar_index + 1)

//Pivot Low Line Plotting
if isPvtLow(0, low) and plotLiq
    _lowPVT = line.new(x1=bar_index - 1, y1=low[1], x2=bar_index, y2=low[1], extend=extend.none, color= pvtBottomColor, style=pvtStyle)
    if array.size(_lowLiqLines) >= pvtMax
        line.delete(array.shift(_lowLiqLines))
    array.push(_lowLiqLines, _lowPVT)

//Pivot High Line Plotting
if isPvtHigh(0, high) and plotLiq
    _highPVT = line.new(x1=bar_index - 1, y1=high[1], x2=bar_index, y2=high[1], extend=extend.none, color=pvtTopColor, style=pvtStyle)
    if array.size(_highLiqLines) >= pvtMax
        line.delete(array.shift(_highLiqLines))
    array.push(_highLiqLines, _highPVT)

if plotLiq
    _controlLine(_lowLiqLines, high, low)
    _controlLine(_highLiqLines, high, low)




//////////////////// Market Structure Break ////////////////////


//Originated from https://www.tradingview.com/pine/?id=PUB%3B5482306601b045cd8df3d01ae0f72b0b 
string      bos_type        = input.string      ("High and Low",    title='MSB trigger',                            options=["High and Low", "Close and Open"], group='MSB and S&D')
//bool        pv2_sv          = input.bool        (false,              title='Display 2nd order pivots', group='MSB and S&D')
bool        bos_sv          = input.bool        (true,              title='Highlight candles that broke structure', group='MSB and S&D')
bool        msb_sv          = input.bool        (true,              title='Plot market structure broke lines', group='MSB and S&D')
bool        box_sv          = input.bool        (false,              title='Plot supply-demand boxes', group='MSB and S&D')
int         box_test_delay  = input.int         (3,                 title='Delay to count test of demand box', group='MSB and S&D')
int         box_fill_delay  = input.int         (3,                 title='Delay to count fill of demand box', group='MSB and S&D')
bool        box_test_sv     = input.bool        (true,              title='Dim tested demand boxes', group='MSB and S&D')
bool        box_stop_sv     = input.bool        (true,              title='Stop plotting filled demand boxes', group='MSB and S&D')
//bool        box_tested_sv     = input.bool        (false,           title='Show tested demand boxes', group='MSB and S&D')


masSupplyColor = input.color(defval=color.new(color.red, 90), title='Supply Color', group='MSB and S&D')
masDemandColor = input.color(defval=color.new(color.green, 90), title='Demand Color', group='MSB and S&D')
masTestedSupplyColor = input.color(defval=color.new(#F9EBC8, 90), title='Tested Supply Color', group='MSB and S&D')
masTestedDemandColor = input.color(defval=color.new(#A0BCC2, 90), title='Tested Demand Color', group='MSB and S&D')

masTopColor = input.color(defval=color.aqua, title='MSB Top Color' , group='MSB and S&D')
masBottomColor = input.color(defval=color.orange, title='MSB Bottom Color', group='MSB and S&D')
masCandleColor = input.color(defval=color.fuchsia, title='MSB Candle Color', group='MSB and S&D')


var float[] pvh1_price      = array.new_float   (1000, na)          // high
var int[]   pvh1_time       = array.new_int     (1000, na)
var float[] pvl1_price      = array.new_float   (1000, na)          // low
var int[]   pvl1_time       = array.new_int     (1000, na)

var float[] pvh2_price      = array.new_float   (1000, na)          // higher high
var int[]   pvh2_time       = array.new_int     (1000, na)
var float[] pvl2_price      = array.new_float   (1000, na)          // lower low
var int[]   pvl2_time       = array.new_int     (1000, na)

var float   htcmrll_price   = na                                    // high that created most recent ll
var int     htcmrll_time    = na
var float   ltcmrhh_price   = na                                    // low that created most recent hh
var int     ltcmrhh_time    = na

var box[]   long_boxes      = array.new_box()
var box[]   short_boxes     = array.new_box()
var box[]   oldlong_boxes   = array.new_box()
var box[]   oldshort_boxes  = array.new_box()

var line[]  bull_bos_lines  = array.new_line()
var line[]  bear_bos_lines  = array.new_line()

var label[] la_ph2          = array.new_label   (1000, na)
var label[] la_pl2          = array.new_label   (1000, na)

var float   temp_pv_0       = na
var float   temp_pv_1       = na
var float   temp_pv_2       = na

bool        pvh             = high < high[1] and high[1] > high[2]
bool        pvl             = low > low[1] and low[1] < low[2]

int         pv1_time        = bar_index[1]
float       pv1_high        = high[1]
float       pv1_low         = low[1]
float       trigger_high    = bos_type=="High and Low" ? high : math.max(open, close)
float       trigger_low     = bos_type=="High and Low" ? low : math.min(open, close)

bool        bos_candle      = false
bool        new_ph_2nd      = false
bool        new_pl_2nd      = false

if barstate.isconfirmed

    if pvh
        array.pop(pvh1_price)
        array.pop(pvh1_time)
        array.unshift(pvh1_price, pv1_high)
        array.unshift(pvh1_time, pv1_time)
        if array.size(pvh1_price) > 2
            temp_pv_0 := array.get(pvh1_price, 0)
            temp_pv_1 := array.get(pvh1_price, 1)
            temp_pv_2 := array.get(pvh1_price, 2)
            if temp_pv_0 > temp_pv_1
                for i = 0 to array.size(pvl1_time) - 1 by 1
                    temp_ltcmrhh_time = array.get(pvl1_time, i)
                    if temp_ltcmrhh_time < array.get(pvh1_time, 0)
                        ltcmrhh_price := array.get(pvl1_price, i)
                        ltcmrhh_time := temp_ltcmrhh_time
                        break
            if temp_pv_0 < temp_pv_1 and temp_pv_1 > temp_pv_2
                array.pop(pvh2_price)
                array.pop(pvh2_time)
                array.unshift(pvh2_price, temp_pv_1)
                array.unshift(pvh2_time, array.get(pvh1_time, 1))
                new_ph_2nd := true

    if pvl
        array.pop(pvl1_price)
        array.pop(pvl1_time)
        array.unshift(pvl1_price, pv1_low)
        array.unshift(pvl1_time, pv1_time)
        if array.size(pvl1_price) > 2
            temp_pv_0 := array.get(pvl1_price, 0)
            temp_pv_1 := array.get(pvl1_price, 1)
            temp_pv_2 := array.get(pvl1_price, 2)
            if temp_pv_0 < temp_pv_1
                for i = 0 to array.size(pvh1_time) - 1 by 1
                    temp_htcmrll_time = array.get(pvh1_time, i)
                    if temp_htcmrll_time < array.get(pvl1_time, 0)
                        htcmrll_price := array.get(pvh1_price, i)
                        htcmrll_time := temp_htcmrll_time
                        break
            if temp_pv_0 > temp_pv_1 and temp_pv_1 < temp_pv_2
                array.pop(pvl2_price)
                array.pop(pvl2_time)
                array.unshift(pvl2_price, temp_pv_1)
                array.unshift(pvl2_time, array.get(pvl1_time, 1))
                new_pl_2nd := true

    if trigger_high > htcmrll_price
        if msb_sv
            array.push(bull_bos_lines, line.new(x1=htcmrll_time, y1=htcmrll_price, x2=bar_index, y2=htcmrll_price, color=masTopColor, width=1))
        if box_sv
            array.push(long_boxes, box.new(left=array.get(pvl1_time, 0), top=math.min(high[bar_index - array.get(pvl1_time, 0)], high[bar_index - array.get(pvl1_time, 0) + 1]), right=bar_index, bottom=array.get(pvl1_price, 0), bgcolor=masDemandColor, border_color=masDemandColor, extend=extend.right))
        bos_candle := true
        htcmrll_price := na
        htcmrll_price

    if trigger_low < ltcmrhh_price
        if msb_sv
            array.push(bear_bos_lines, line.new(x1=ltcmrhh_time, y1=ltcmrhh_price, x2=bar_index, y2=ltcmrhh_price, color= masBottomColor, width=1))
        if box_sv
            array.push(short_boxes, box.new(left=array.get(pvh1_time, 0), top=array.get(pvh1_price, 0), right=bar_index, bottom=math.max(low[bar_index - array.get(pvh1_time, 0)], low[bar_index - array.get(pvh1_time, 0) + 1]), bgcolor=masSupplyColor, border_color= masSupplyColor, extend=extend.right))
        bos_candle := true
        ltcmrhh_price := na
        ltcmrhh_price

    if array.size(short_boxes) > 0
        for i = array.size(short_boxes) - 1 to 0 by 1
            tbox = array.get(short_boxes, i)
            _top = box.get_top(tbox)
            _bottom = box.get_bottom(tbox)
            if trigger_high > _bottom and box.get_left(tbox) + box_test_delay < bar_index and box_test_sv
                box.set_bgcolor(tbox, masTestedSupplyColor)
                box.set_border_color(tbox, masTestedSupplyColor)
            if trigger_high > _top and box.get_left(tbox) + box_fill_delay < bar_index
                if box_stop_sv
                    box.set_right(tbox, bar_index)
                    box.set_extend(tbox, extend.none)
                    array.unshift(oldshort_boxes, tbox)
                    array.remove(short_boxes, i)

    if array.size(long_boxes) > 0
        for i = array.size(long_boxes) - 1 to 0 by 1
            lbox = array.get(long_boxes, i)
            _top = box.get_top(lbox)
            _bottom = box.get_bottom(lbox)
            if trigger_low < _top and box.get_left(lbox) + box_test_delay < bar_index and box_test_sv
                box.set_bgcolor(lbox, masTestedDemandColor)
                box.set_border_color(lbox, masTestedDemandColor)
            if trigger_low < _bottom and box.get_left(lbox) + box_fill_delay < bar_index
                if box_stop_sv
                    box.set_right(lbox, bar_index)
                    box.set_extend(lbox, extend.none)
                    array.unshift(oldlong_boxes, lbox)
                    array.remove(long_boxes, i)
    // if pv2_sv
    //     if new_ph_2nd
    //         array.pop(la_ph2)
    //         array.unshift(la_ph2, label.new(x = array.get(pvh2_time, 0), y = array.get(pvh2_price, 0), xloc = xloc.bar_index, style = label.style_label_down,    color = #770000FF, size = size.tiny))
    //     if new_pl_2nd
    //         array.pop(la_pl2)
    //         array.unshift(la_pl2, label.new(x = array.get(pvl2_time, 0), y = array.get(pvl2_price, 0), xloc = xloc.bar_index, style = label.style_label_up,      color = #007700FF, size = size.tiny))

barcolor(bos_candle and bos_sv ? masCandleColor : na)

///////////////// ABC //////////////////

groupABC = "ABC"
prd = input.int(defval=8, title='ZigZag Period', minval=2, maxval=50, group=groupABC)
fiboup = input.float(defval=0.618, title='Fibonacci Max', group=groupABC)
fibodn = input.float(defval=0.382, title='Fibonacci Min', group=groupABC)

errorrate = input.float(defval=5.0, title='Error Rate', minval=0, maxval=30, group=groupABC) / 100
showabc = input.bool(defval=true, title='Show ABC', group=groupABC)

showzigzag = input.bool(defval=false, title='Show Zig Zag', group=groupABC, inline='zigzag')
upcol = input.color(defval=color.lime, title='', group=groupABC, inline='zigzag')
dncol = input.color(defval=color.red, title='', group=groupABC, inline='zigzag')

showfib = input.bool(defval=false, title='Show Fibo', group=groupABC, inline='fib')
fibColor = input.color(defval=color.blue, title='', group=groupABC, inline='fib')

showABCSignal = input.bool(defval=false, title='Show ABC Signal', group=groupABC)

showcloud = input.bool(defval=false, title='Show Cloud', group=groupABC, inline='cloud')
c_upcol = input.color(defval=color.new(color.lime, 75), title='', group=groupABC, inline='cloud')
c_dncol = input.color(defval=color.new(color.red, 75), title='', group=groupABC, inline='cloud')
srcma = input.source(defval=close, title='Source for Moving Averages', group=groupABC)
malen1 = input.int(defval=50, title='SMA 1 Length', minval=1, group=groupABC)
malen2 = input.int(defval=100, title='SMA 2 Length', minval=1, group=groupABC)
malen3 = input.int(defval=150, title='SMA 3 Length', minval=1, group=groupABC)
malen4 = input.int(defval=200, title='SMA 4 Length', minval=1, group=groupABC)
malen5 = input.int(defval=20, title='EMA 1 Length', minval=1, group=groupABC)
malen6 = input.int(defval=40, title='EMA 2 Length', minval=1, group=groupABC)

ma_array = array.new_float(6)
array.set(ma_array, 0, ta.sma(srcma, malen1))
array.set(ma_array, 1, ta.sma(srcma, malen2))
array.set(ma_array, 2, ta.sma(srcma, malen3))
array.set(ma_array, 3, ta.sma(srcma, malen4))
array.set(ma_array, 4, ta.ema(srcma, malen5))
array.set(ma_array, 5, ta.ema(srcma, malen6))

float umax = na
float umin = na
float lmax = na
float lmin = na
int upper = 0
int lower = 0
for x = 1 to 6 by 1
    ma = array.get(ma_array, x - 1)
    if ma >= math.max(open, close)
        upper += 1
        if na(umax)
            umax := ma
            umin := ma
            umin
        else
            umax := math.max(umax, ma)
            umin := math.min(umin, ma)
            umin
    else if ma <= math.min(open, close)
        lower += 1
        if na(lmax)
            lmax := ma
            lmin := ma
            lmin
        else
            lmax := math.max(lmax, ma)
            lmin := math.min(lmin, ma)
            lmin

var int trend = 0
trend := lower > 0 and upper == 0 and lower[1] > 0 and upper[1] == 0 ? 1 : lower == 0 and upper > 0 and lower[1] == 0 and upper[1] > 0 ? -1 : trend

tucolor = trend == 1 ? c_upcol : na
tdcolor = trend == -1 ? c_dncol : na

fill(plot(umax, color=na), plot(umin, color=na), color=showcloud ? tdcolor : na, transp=90)
fill(plot(lmax, color=na), plot(lmin, color=na), color=showcloud ? tucolor : na, transp=90)

//===================================================================

// zigzag part
get_ph_pl_dir(len) =>
    float ph = ta.highestbars(high, len) == 0 ? high : na
    float pl = ta.lowestbars(low, len) == 0 ? low : na
    var dir = 0
    iff_1 = pl and na(ph) ? -1 : dir
    dir := ph and na(pl) ? 1 : iff_1
    [ph, pl, dir]

[ph, pl, dir] = get_ph_pl_dir(prd)

var max_array_size = 10
var zigzag = array.new_float(0)

add_to_zigzag(value, bindex) =>
    array.unshift(zigzag, bindex)
    array.unshift(zigzag, value)
    if array.size(zigzag) > max_array_size
        array.pop(zigzag)
        array.pop(zigzag)

update_zigzag(value, bindex) =>
    if array.size(zigzag) == 0
        add_to_zigzag(value, bindex)
    else
        if dir == 1 and value > array.get(zigzag, 0) or dir == -1 and value < array.get(zigzag, 0)
            array.set(zigzag, 0, value)
            array.set(zigzag, 1, bindex)
        0.

dir_changed = ta.change(dir)
if ph or pl
    if dir_changed
        add_to_zigzag(dir == 1 ? ph : pl, bar_index)
    else
        update_zigzag(dir == 1 ? ph : pl, bar_index)

if showzigzag and array.size(zigzag) > 5
    var line zzline1 = na
    var line zzline2 = na
    line.delete(zzline1)
    line.delete(zzline2)
    zzline1 := line.new(x1=math.round(array.get(zigzag, 1)), y1=array.get(zigzag, 0), x2=math.round(array.get(zigzag, 3)), y2=array.get(zigzag, 2), color=dir == 1 ? upcol : dncol, width=2, style=line.style_dashed)
    zzline2 := line.new(x1=math.round(array.get(zigzag, 3)), y1=array.get(zigzag, 2), x2=math.round(array.get(zigzag, 5)), y2=array.get(zigzag, 4), color=dir == -1 ? upcol : dncol, width=2, style=line.style_dashed)
 
if showfib and array.size(zigzag) > 5
       // min/max fibo levels
    zzlen = math.abs(array.get(zigzag, 2) - array.get(zigzag, 4))
    fmin = dir == 1 ? array.get(zigzag, 2) + zzlen * (fibodn - errorrate) : array.get(zigzag, 4) + zzlen * (1 - fibodn + errorrate)
    fmax = dir == 1 ? array.get(zigzag, 2) + zzlen * (fiboup + errorrate) : array.get(zigzag, 4) + zzlen * (1 - fiboup - errorrate)
    var line fibo1 = na
    var line fibo2 = na
    line.delete(fibo1)
    line.delete(fibo2)
    fibo1 := line.new(x1=math.round(array.get(zigzag, 3)), y1=fmin, x2=math.round(array.get(zigzag, 3)) + 1, y2=fmin, color=fibColor, style=line.style_dashed, extend=extend.right)
    fibo2 := line.new(x1=math.round(array.get(zigzag, 3)), y1=fmax, x2=math.round(array.get(zigzag, 3)) + 1, y2=fmax, color=fibColor, style=line.style_dashed, extend=extend.right)
    fibo2
    
zchange = array.size(zigzag) > 0 ? array.get(zigzag, 0) : 0.0
abc = array.new_float(0)
if ta.change(zchange) and array.size(zigzag) > 5 and (pl and trend == 1 and dir == -1 and low < array.max(ma_array) or ph and trend == -1 and dir == 1 and high > array.min(ma_array))
    a = array.get(zigzag, 0)
    b = array.get(zigzag, 2)
    b_loc = array.get(zigzag, 3)
    c = array.get(zigzag, 4)
    c_loc = array.get(zigzag, 5)
    rate = (a - b) / (c - b)
    if rate >= fibodn - fibodn * errorrate and rate <= fiboup + fiboup * errorrate
        array.push(abc, b)
        array.push(abc, b_loc)
        array.push(abc, c)
        array.push(abc, c_loc)

draw_line(dir, x1_, y1_, x2_, y2_, x3_, y3_) =>
    l1 = line.new(x1=x1_, y1=y1_, x2=x2_, y2=y2_, color=dir == 1 ? upcol : dncol, width=1)
    l2 = line.new(x1=x2_, y1=y2_, x2=x3_, y2=y3_, color=dir == 1 ? dncol : upcol, width=1)
    [l1, l2]

draw_label(dir, x1_, y1_, x2_, y2_, x3_, y3_) =>
    alabel = label.new(x=x1_, y=y1_, text='C', style=dir == 1 ? label.style_label_down : label.style_label_up, color=color.new(color.white, 100), textcolor=color.blue)
    blabel = label.new(x=x2_, y=y2_, text='B', style=dir == -1 ? label.style_label_down : label.style_label_up, color=color.new(color.white, 100), textcolor=color.blue)
    clabel = label.new(x=x3_, y=y3_, text='A', style=dir == 1 ? label.style_label_down : label.style_label_up, color=color.new(color.white, 100), textcolor=color.blue)
    [alabel, blabel, clabel]

var abclines = array.new_line(2)
var abclabels = array.new_label(3)

if showabc and array.size(abc) >= 4
    //if not keepabc
    line.delete(array.pop(abclines))
    line.delete(array.pop(abclines))
    label.delete(array.pop(abclabels))
    label.delete(array.pop(abclabels))
    label.delete(array.pop(abclabels))

    [l1_, l2_] = draw_line(dir, bar_index, array.get(zigzag, 0), math.round(array.get(abc, 1)), array.get(abc, 0), math.round(array.get(abc, 3)), array.get(abc, 2))
    array.unshift(abclines, l1_)
    array.unshift(abclines, l2_)

    [la1_, la2_, la3_] = draw_label(dir, bar_index, array.get(zigzag, 0), math.round(array.get(abc, 1)), array.get(abc, 0), math.round(array.get(abc, 3)), array.get(abc, 2))
    array.unshift(abclabels, la1_)
    array.unshift(abclabels, la2_)
    array.unshift(abclabels, la3_)

// bounce?
lbounced = false
sbounced = false
for i = 0 to 5 by 1
    if math.min(low, low[1]) <= array.get(ma_array, i) and close > array.get(ma_array, i) and close > open
        lbounced := true
        lbounced
    if math.max(high, high[1]) >= array.get(ma_array, i) and close < array.get(ma_array, i) and close < open
        sbounced := true
        sbounced

// stoch give signal?
sto = ta.sma(ta.stoch(close, high, low, 5), 3)
sto_sig = ta.sma(sto, 3)
lstoch = sto[1] <= sto_sig[1] and sto > sto_sig and sto[1] < 50  //and sto_sig > 20
sstoch = sto[1] >= sto_sig[1] and sto < sto_sig and sto[1] > 50  //and sto_sig < 80

/// check if conditions met
there_is_abc = array.size(abc) != 0
var float last_zz_point = 0.
last_zz_point := array.size(zigzag) > 2 and there_is_abc ? array.get(zigzag, 0) : last_zz_point
var abc_bar_count = 0
abc_bar_count := there_is_abc ? 0 : abc_bar_count + 1
hhh_ = ta.highest(abc_bar_count + 1)
lll_ = ta.lowest(abc_bar_count + 1)

// long condition
long = trend == 1 and abc_bar_count <= 6 and lbounced and lll_ >= last_zz_point
short = trend == -1 and abc_bar_count <= 6 and sbounced and hhh_ <= last_zz_point

plotshape(showABCSignal ? long : na, style=shape.triangleup, color=upcol, location=location.belowbar, size=size.small)
plotshape(showABCSignal ? short : na, style=shape.triangledown, color=dncol, location=location.abovebar, size=size.small)


///////////////// Alert //////////////////

// Any direction combined
alertcondition((isFvgUp(0) and isObUp(1)) or discountDiscount or discountDiscount1 or bullStructureBreakingFVG or bullBOS or (isFvgDown(0) and isObDown(1)) or premiumPremium or premiumPremium1 or bearStructureBreakingFVG or bearBOS or bullRJB or bearRJB, title="01 Any Strong/Weak Bullish/Bearish", message="Bullish/Bearish OB+FVG Stack or PPDD OB or BOS+- or FVG+- Structure or RJB+ or RJB-")
alertcondition((isFvgUp(0) and isObUp(1)) or isFvgUp(0) or isObUp(0) or discountDiscount or discountDiscount1 or bullStructureBreakingFVG or bullBOS or (isFvgDown(0) and isObDown(1)) or isFvgDown(0) or isObDown(0) or premiumPremium or premiumPremium1 or bearStructureBreakingFVG or bearBOS or bullRJB or bearRJB, title="02 Any Bullish/Bearish", message="Bullish/Bearish OB+FVG Stack or PPDD OB or BOS+- or FVG+- Structure or OB+- or FGP+- or BOS+- or RJB+ or RJB-")


//Bullish
alertcondition((isFvgUp(0) and isObUp(1)) or isFvgUp(0) or isObUp(0) or discountDiscount or discountDiscount1 or bullStructureBreakingFVG or bullBOS or bullRJB, title="03 Any Bullish", message="Bullish OB+FVG Stack or Bullish PPDD OB or BOS+ or FVG+ Structure or RJB+ or OB+ or FGP+")
alertcondition((isFvgUp(0) and isObUp(1)) or discountDiscount or discountDiscount1 or bullStructureBreakingFVG or bullBOS or bullRJB, title="04 Any Strong/Weak Bullish", message="Bullish OB+FVG Stack or Bullish PPDD OB or BOS+ or FVG+ Structure or RJB+")
alertcondition(isFvgUp(0) and isObUp(1), title="05 Bullish OB+FVG Stack", message="Bullish OB+FVG Stack")
alertcondition(bullStructureBreakingFVG, title="06 Bullish FVG Structure Breaking", message="Bullish FVG Structure Breaking")
alertcondition(discountDiscount, title="07 Strong Bullish PPDD OB ", message="Strong Bullish PPDD OB")
alertcondition(discountDiscount1, title="08 Weak Bullish PPDD OB ", message="Weak Bullish PPDD OB")
alertcondition(bullBOS, title="09 Bullish BOS+ ", message="Bullish BOS+")
alertcondition(isFvgUp(0) , title="10 Bullish FVG ", message="Bullish FVG")
alertcondition(isObUp(0), title="11 Bullish OB ", message="Bullish OB")
alertcondition(bullRJB, title="12 Bullish RJB+", message="Bullish RJB+")
alertcondition(long, title='13 ABC Long', message='ABC Long')



//Bearish
alertcondition((isFvgDown(0) and isObDown(1)) or isFvgDown(0) or isObDown(0) or premiumPremium or premiumPremium1 or bearStructureBreakingFVG or bearBOS or bearRJB, title="13 Any Bearish", message="Bearish OB+FVG Stack or Bearish PPDD OB or BOS- or FVG- Structure or RJB- or OB- or FGP-")
alertcondition((isFvgDown(0) and isObDown(1)) or premiumPremium or premiumPremium1 or bearStructureBreakingFVG or bearBOS or bearRJB, title="14 Any Strong/Weak Bearish", message="Bearish OB+FVG Stack or Bearish PPDD OB or BOS- or FVG- Structure or RJB-")
alertcondition(isFvgDown(0) and isObDown(1), title="15 Bearish OB+FVG Stack", message="Bearish OB+FVG Stack")
alertcondition(bearStructureBreakingFVG, title="16 Bearish FVG Structure Breaking", message="Bearish FVG Structure Breaking")
alertcondition(premiumPremium, title="17 Strong Bearish PPDD OB ", message="Strong Bearish PPDD OB")
alertcondition(premiumPremium1, title="18 Weak Bearish PPDD OB ", message="Weak Bearish PPDD OB")
alertcondition(bearBOS, title="19 Bearish BOS-", message="Bearish BOS-")
alertcondition(isFvgDown(0), title="20 Bearish FVG", message="Bearish FVG")
alertcondition(isObDown(0), title="21 Bearish OB", message="Bearish OB")
alertcondition(bearRJB, title="22 Bearish RJB+", message="Bearish RJB-")
alertcondition(short, title='23 ABC Short', message='ABC Short')
